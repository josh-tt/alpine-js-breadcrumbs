import Alpine from 'alpinejs';
// Refactored and more flexibility.
// Note: uses alpine.store to set the loading state which should then be used on the 'template' tags hwich have trouble resetting when using live urls. If removed, then this should work with js along without alpine.

export default ( { href, disabled, back, referrerUrl, title, truncate, stripDashes, stripUnderscores, trailingSlash, lettercase, firstCrumbSvg, secondCrumbSvg, truncateCrumbSvg, stringReplace, stringReplacements = [], whitelistUrls = [], blacklistUrls = [] } ) => ( {
	url: href || window.location.href,
	disabled: disabled || false,
	truncate: truncate || false,
	stripDashes: stripDashes || true,
	stripUnderscores: stripUnderscores || true,
	trailingSlash: trailingSlash || true,
	back: back || false,
	referrerUrl: referrerUrl || false,
	useTitle: title || false,
	lettercase: lettercase || 'capitalize',
	firstCrumbSvg: firstCrumbSvg || false,
	secondCrumbSvg: secondCrumbSvg || false,
	truncateCrumbSvg: truncateCrumbSvg || false,
	stringReplace: stringReplace || true,
	stringReplacements: [
		...stringReplacements, // User defined string replacements (others below are built-in - can't be changed)
		{
			find: '-expansions',
			replace: 'expansions',
			path: '/some/path/to/check/specifically',
			pattern: '',
		},
		{
			find: 'expansions', // Global find / replace
			replace: 'exp',
			path: '',
			pattern: '',
		},
		{
			find: '',
			replace: '',
			path: '',
			pattern: 'https://dogs.com/dogs/(.*)', // Todo: Reimplement pattern from previous version
		},
	],
	whitelistUrls: [
		...whitelistUrls, // User defined urls to enable breadcrumbs on - setting disabled to false (opposite of blacklistUrls) - // Use a regex wildcard to match multiple urls
		// 'http://something.com/foo/*',
		// 'http://cats.com/plugins/expansions/templates/sound-packs',

	],
	blacklistUrls: [
		...blacklistUrls, // User defined urls to bypass (others below are built-in - can't be changed) - // Use a regex wildcard to match multiple urls
		// 'http://something.com/bar/*',
		// 'http://cats.com/plugins/expansions/templates/sound-packs',
	],

	get urlObj() {
		const obj = new URL( this.url );
		const pathname = obj.pathname;
		const domain = obj.hostname;
		const search = obj.search;
		const searchParms = obj.searchParams;
		const hash = obj.hash;

		// Set disabled state based on blacklist and whitelist
		this.maybeDisable( this.url );

		return {
			pathname,
			domain,
			search,
			searchParms,
			hash,
		};
	},

	get breadcrumbs() {
		if ( ! this.disabled ) {
			const pathname = this.urlObj.pathname;

			// Create the crumbs from the string
			const crumbs = this.createBreadcrumbs( pathname ).filter( ( item ) => item.name !== '' );

			// Add Trailing slashes on the last crumb
			this.handleTrailingSlash( crumbs );

			// First and Last text content
			this.handleBack( crumbs );
			this.handleTitle( crumbs );

			// String replace (pre-formatting - so based on url)
			this.handleStringReplace( crumbs );

			// Text Formatting
			this.handleLetterCase( crumbs );
			this.handleDashes( crumbs );
			this.handleUnderscores( crumbs );

			// Svgs
			this.setSvgStates( crumbs );

			return crumbs;
		}

		return [];
	},

	get allCrumbs() {
		// New map from the crumbs
		const all = this.breadcrumbs.map( ( crumb ) => {
			return {
				name: crumb.name,
				path: crumb.path,
				show: crumb.show,
				truncate: crumb.truncate,
				svg: crumb.svg,
				type: crumb.type,
			};
		} );

		Alpine.store( 'isLoading', {
			breadcrumbs: true,
		} );

		this.truncateCrumbs( all );

		Alpine.store( 'isLoading', {
			breadcrumbs: false,
		} );

		return all;
	},

	get allMinusFirst() {
		const all = this.allCrumbs;
		all.shift();
		return all;
	},

	get allMinusLast() {
		const all = this.allCrumbs;
		all.pop();
		return all;
	},

	get allMinusFirstAndLast() {
		const all = this.allCrumbs;
		all.shift();
		all.pop();
		return all;
	},

	get firstCrumb() {
		// New map from the crumbs
		const all = this.breadcrumbs.map( ( crumb ) => {
			return {
				name: crumb.name,
				path: crumb.path,
				show: crumb.show,
				svg: crumb.svg,
				truncate: crumb.truncate,
			};
		} );
		// Remove the first crumb in an array
		const fC = all.shift();
		return [ fC ];
	},

	get secondCrumb() {
		// New map from the crumbs
		const all = this.breadcrumbs.map( ( crumb ) => {
			return {
				name: crumb.name,
				path: crumb.path,
				show: crumb.show,
				svg: crumb.svg,
				truncate: crumb.truncate,
			};
		} );
		// Remove the first crumb in an array
		all.shift();
		if ( all.length > 0 ) {
			// Get the second crumb
			const sC = all.shift();
			return [ sC ];
		}
		return [];
	},

	get lastCrumb() {
		// New map from the crumbs
		const all = this.breadcrumbs.map( ( crumb ) => {
			return {
				name: crumb.name,
				path: crumb.path,
				show: crumb.show,
				svg: crumb.svg,
				truncate: crumb.truncate,
			};
		} );
		// Remove the last crumb
		const lC = all.pop();
		return [ lC ];
	},

	get lastTwoCrumbs() {
		// New map from the crumbs
		const all = this.breadcrumbs.map( ( crumb ) => {
			return {
				name: crumb.name,
				path: crumb.path,
				show: crumb.show,
				svg: crumb.svg,
				truncate: crumb.truncate,
			};
		} );
		return all.slice( -2 );
	},

	get previousCrumb() {
		if ( this.breadcrumbs.length > 1 ) {
			// New map from the crumbs
			const all = this.breadcrumbs.map( ( crumb ) => {
				return {
					name: crumb.name,
					path: crumb.path,
					show: crumb.show,
					svg: crumb.svg,
					truncate: crumb.truncate,
				};
			} );
			// Remove the last crumb and return in an array
			const crumb = all[ all.length - 2 ];
			return [ crumb ];
		}
		return [];
	},

	get previousTwoCrumbs() {
		// New map from the crumbs
		const all = this.breadcrumbs.map( ( crumb ) => {
			return {
				name: crumb.name,
				path: crumb.path,
				show: crumb.show,
				svg: crumb.svg,
				truncate: crumb.truncate,
			};
		} );
		// Remove the last crumb
		return all.slice( all.length - 3, all.length - 1 );
	},

	get truncatedCrumbs() {
		const crumbs = this.breadcrumbs.filter( ( crumb ) => crumb.truncate === true );
		return crumbs;
	},

	get shownCrumbs( ) {
		const shown = this.breadcrumbs.filter( ( crumb ) => crumb.show !== false );
		return shown;
	},

	get hiddenCrumbs( ) {
		const notShown = this.breadcrumbs.filter( ( crumb ) => crumb.show === false );
		return notShown;
	},

	get isDisabled() {
		return this.disabled;
	},

	get isTruncated() {
		return this.truncate;
	},

	maybeDisable( url ) {
		if ( this.whitelistUrls.length > 0 ) {
			// Use match to check if the url is in the whitelist
			const whitelistMatch = this.whitelistUrls.some( ( item ) => {
				const regex = new RegExp( item );
				return regex.test( url );
			} );
			if ( ! whitelistMatch ) {
				this.disabled = ! this.disabled;
			}
		}
		if ( this.blacklistUrls.length > 0 ) {
			const blacklistMatch = this.blacklistUrls.some( ( item ) => {
				const regex = new RegExp( item );
				return regex.test( url );
			} );
			if ( blacklistMatch ) {
				this.disabled = ! this.disabled;
			}
		}
	},

	// Crumbs
	createBreadcrumbs( path ) {
		// Return home if path === '/'
		if ( path === '/' ) {
			return [ {
				name: 'Home',
				path: '/',
			} ];
		}

		let crumbs = [];

		// Split the path into an array of strings
		crumbs = path.split( '/' );
		crumbs = crumbs.map( ( breadcrumb, index ) => {
			//  // And path is equal to '/' or ''
			if ( index === 0 ) {
				breadcrumb = 'Home';
				return {
					name: breadcrumb,
					path: '/',
					show: true,
					truncate: false,
					svg: false,
					type: 'crumb',

				};
			}

			// If count is greater than 1, add the previous breadcrumb to the path
			return {
				name: breadcrumb,
				path: crumbs.slice( 0, index + 1 ).join( '/' ),
				show: true,
				truncate: false,
				svg: false,
				type: 'crumb',
			};
		} );

		// Maybe disable the crumbs
		if ( this.disabled === true ) {
			return crumbs = [];
		}

		this.setTruncateState( crumbs );

		return crumbs;
	},

	truncateCrumbs( crumbs ) {
		if ( this.truncate ) {
			// Replace all the truncate true crumbs with a single crumb containing an array of the truncated crumbs
			const truncated = crumbs.filter( ( crumb ) => crumb.truncate === true );
			if ( truncated.length > 0 && truncated.length < crumbs.length ) {
				const truncatedCrumbs = truncated.map( ( crumb ) => {
					return {
						name: crumb.name,
						path: crumb.path,
						show: crumb.show,
						truncate: crumb.truncate,
						svg: crumb.svg,
						type: 'crumb',
					};
				} );

				const truncatedCrumb = {
					name: '...',
					path: 'javascript:void(0)',
					show: true,
					truncate: true,
					svg: false,
					type: 'list',
					truncatedCrumbs,
				};

				crumbs.splice( crumbs.indexOf( truncated[ 0 ] ), truncated.length, truncatedCrumb );
			}
		}

		return crumbs;
	},

	setTruncateState( crumbs ) {
		crumbs = crumbs.map( ( crumb, index ) => {
			if ( this.truncate === false ) {
				crumb.show = true;
			}

			if ( this.truncate === true ) {
				// If there are more than 4 crumbs, replace the middle ones with a '...'
				if ( crumbs.length > 2 ) {
					if ( index > 1 && index < crumbs.length - 2 ) {
						// Set all the middle ones to shown is false, add 'truncated = true' to them all and put them in an truncated array
						crumb.show = false;
						crumb.truncate = true;
					}
				}
			}
		} );

		return crumbs;
	},

	setSvgStates( crumbs ) {
		// If index is 0 , set the crumb svg to 'true
		crumbs = crumbs.map( ( crumb, index ) => {
			if ( index === 0 ) {
				crumb.svg = this.firstCrumbSvg;
			}
			if ( index === 1 ) {
				crumb.svg = this.secondCrumbSvg;
			}
			if ( crumb.type === 'list' ) {
				crumb.svg = this.truncateCrumbSvg;
			}
		} );

		return crumbs;
	},

	handleBack( crumbs ) {
		// If back is true, replace first item with 'back' text
		if ( this.back ) {
			crumbs[ 0 ].name = 'Back';
		}
		if ( this.referrerUrl ) {
			// Check if referrer is for this domain, if it is, use it
			if ( document.referrer.includes( this.urlObj.domain ) ) {
				crumbs[ 0 ].path = document.referrer;
			}
		}
	},

	// Formatting
	handleTrailingSlash( crumbs ) {
		if ( this.trailingSlash ) {
			// Add trailing slash to each crumb
			crumbs.map( ( crumb ) => {
				if ( ! crumb.path.endsWith( '/' ) ) {
					crumb.path = `${ crumb.path }/`;
				}
			} );
			return;
		}
		// If path is not equal to '/', remove trailing slash
		crumbs.map( ( crumb ) => {
			if ( crumb.path !== '/' && crumb.path.endsWith( '/' ) ) {
				crumb.path = crumb.path.slice( 0, -1 );
			}
		} );
	},

	handleLetterCase( crumbs ) {
		if ( this.lettercase === 'lowercase' ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.toLowerCase();
			} );
			return;
		}
		if ( this.lettercase === 'uppercase' ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.toUpperCase();
			} );
			return;
		}
		if ( this.lettercase === 'capitalize' ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.charAt( 0 ).toUpperCase() + crumb.name.slice( 1 );
			} );
		}
	},

	handleDashes( crumbs ) {
		if ( this.stripDashes ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.replace( /-/g, ' ' );
			} );
		}
	},

	handleUnderscores( crumbs ) {
		if ( this.stripUnderscores ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.replace( /_/g, ' ' );
			} );
		}
	},

	// Text Content
	handleStringReplace( crumbs ) {
		if ( this.stringReplace ) {
			crumbs.map( ( crumb ) => {
				this.stringReplacements.forEach( ( replace ) => {
					// If path is not empty and path matches, do the find replace
					if ( replace.path !== '' ) {
						// Pre-format the replacement path trailing slashes to match user setting to avoid typos
						if ( this.trailingSlash ) {
							replace.path = this.addTrailingSlash( replace.path );
						} else {
							replace.path = this.removeTrailingSlash( replace.path );
						}
						// If the path matches
						if ( crumb.path === replace.path ) {
							// If find is empty, replace the crumb name with replace name
							if ( replace.find === '' ) {
								crumb.name = replace.replace;
							} else {
							// If find is not empty, do the find replace
								crumb.name = crumb.name.replace( replace.find, replace.replace );
							}
						}
						// If path is empty, do the find replace
					} else if ( replace.path === '' ) {
						crumb.name = crumb.name.replace( replace.find, replace.replace );
					}
				} );
			} );
		}
	},

	handleTitle( crumbs ) {
		// If this is the last crumb, set the title to the crumb name
		if ( crumbs.length > 0 ) {
			// Use the document title
			if ( this.useTitle ) {
				crumbs[ crumbs.length - 1 ].name = document.title;
			}
		}
	},

	// Toggle events
	toggleTruncate() {
		this.truncate = ! this.truncate;
	},

	toggleDisabled() {
		this.disabled = ! this.disabled;
	},

	// Utilities
	addTrailingSlash: ( path ) => ( path.endsWith( '/' ) ? path : `${ path }/` ),
	removeTrailingSlash: ( path ) => ( path.endsWith( '/' ) ? path.slice( 0, -1 ) : path ),

	init() {

	},

} );
