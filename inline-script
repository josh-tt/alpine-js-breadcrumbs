<script>
    document.addEventListener('alpine:init', () => {
    Alpine.data('breadcrumb', ( link = '', blacklist = [], replacements = [], customIcon = '', customAltIcon = '' ) => ({
        disabled: false,
	customHref: 'http:/tt.com/expansions/s-layer',
	trailingSlash: false,
	lettercase: 'lowercase',
	home: false,
	back: false, // replace the first item with 'back' text
	referrerUrl: false, // use the window referrer url as the back url
	last: false, // show last item
	title: false, // use document title as last item
	stripDashes: false,
	stripUnderscores: false,
	bypassUrls: [],
	stringReplace: true,
	stringReplacements: [
		{
			find: '-expansions',
			replace: '',
			path: '',
		},
		{
			find: '',
			replace: '',
			path: '',
		},
	],
	showFirstOnly: false, // only show the first item
	showPreviousOnly: false, // only show the previous item
	allowOneItem: false, // show the breadcrumb even if there is only one item
	svg: 'home',
	homeSvg: '<svg home xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M8 0L0 8l1.414 1.414L8 2.828l5.586 5.586L16 8z"/></svg>',
	backSvg: '<svg back xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M8 0L0 8l1.414 1.414L8 2.828l5.586 5.586L16 8z"/></svg>',
	altSvg: icon || '<svg alt xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path d="M8 0L0 8l1.414 1.414L8 2.828l5.586 5.586L16 8z"/></svg>',

	get url() {
		const url = this.customHref ? this.customHref : window.location.href;
		if ( this.maybeDisable( url ) ) {
			this.disabled = true;
		}
		return this.url = url;
	},

	get urlObj() {
		const urlObj = new URL( this.url );
		const pathname = urlObj.pathname;
		const domain = urlObj.hostname;
		const search = urlObj.search;
		const searchParms = urlObj.searchParams;
		const hash = urlObj.hash;

		return this.urlObj = {
			pathname,
			domain,
			search,
			searchParms,
			hash,
		};
	},

	get breadcrumbs() {
		if ( ! this.disabled ) {
			const pathname = this.urlObj.pathname;
			const crumbs = this.createBreadcrumbs( pathname ).filter( ( item ) => item.name !== '' );
			return this.breadcrumbs = crumbs;
		}

		return this.breadcrumbs = [];
	},

	get queryCrumbs() {
		if ( ! this.disabled ) {
			const search = this.urlObj.search;
			const searchParms = this.urlObj.searchParms;
			const queryCrumbs = this.createQueryCrumbs( search, searchParms );
			return this.queryCrumbs = queryCrumbs;
		}

		return this.queryCrumbs = [];
	},

	get hashCrumb() {
		if ( ! this.disabled ) {
			const hash = this.urlObj.hash;
			const hashCrumb = this.createHashCrumb( hash );
			return this.hashCrumb = hashCrumb;
		}

		return this.hashCrumb = [];
	},

	maybeDisable( url ) {
		if ( this.bypassUrls.includes( url ) ) {
			return true;
		}
		return false;
	},

	createBreadcrumbs( path ) {
		// Return home if path === '/'
		if ( path === '/' ) {
			return [ {
				name: 'Home',
				path: '/',
			} ];
		}

		let crumbs = [];

		// Split the path into an array of strings
		crumbs = path.split( '/' );
		crumbs = crumbs.map( ( breadcrumb, index ) => {
			// Replace the first item in the array with Home and the path with /
			if ( index === 0 ) {
				breadcrumb = 'Home';
				return {
					name: breadcrumb,
					path: '/',
				};
			}

			// If count is greater than 1, add the previous breadcrumb to the path
			return {
				name: breadcrumb,
				path: crumbs.slice( 0, index + 1 ).join( '/' ),
			};
		} );

		// Handle home, back and last options
		this.handleHome( crumbs );
		this.handleBack( crumbs );
		this.handleLast( crumbs );
		// Handle symbols and casings
		this.handleDashes( crumbs );
		this.handleUnderscores( crumbs );
		this.handleTrailingSlash( crumbs );
		this.handleLetterCase( crumbs );
		this.handleStringReplace( crumbs );
		// Remove items
		this.handleFirstOnly( crumbs );
		this.handlePreviousOnly( crumbs );
		this.handleSvg( crumbs );

		return crumbs;
	},

	createQueryCrumbs( search, searchParms ) {
		if ( search === '' ) {
			return [];
		}
		const queryCrumbs = [];
		searchParms.forEach( ( value, key ) => {
			queryCrumbs.push( {
				name: key,
				value,
			} );
		} );

		// Handle symbols and casings
		this.handleDashes( queryCrumbs );
		this.handleUnderscores( queryCrumbs );
		this.handleLetterCase( queryCrumbs );
		this.handleStringReplace( queryCrumbs );

		return queryCrumbs;
	},

	createHashCrumb( hash ) {
		if ( hash === '' ) {
			return [];
		}
		const hashCrumb = [ {
			name: hash.replace( '#', '' ),
			path: hash,
		} ];

		// Handle symbols and casings
		this.handleDashes( hashCrumb );
		this.handleUnderscores( hashCrumb );
		this.handleLetterCase( hashCrumb );
		this.handleStringReplace( hashCrumb );

		return hashCrumb;
	},

	handleSvg( crumbs ) {
		if ( this.svg === 'home' ) {
			crumbs[ 0 ].svg = this.homeSvg;
		} else if ( this.svg === 'back' ) {
			crumbs[ 1 ].svg = this.backSvg;
		} else if ( this.svg === 'alt' ) {
			crumbs[ crumbs.length - 1 ].svg = this.altSvg;
		} else if ( this.svg === '' ) {
			crumbs[ 0 ].svg = '';
		}
	},

	handleHome( crumbs ) {
		if ( ! this.home ) {
			if ( crumbs[ 0 ].path === '/' ) {
				// Remove it from array
				crumbs.shift();
			}
		}
	},

	handleBack( crumbs ) {
		// If back is true, replace first item with 'back' text
		if ( this.back ) {
			crumbs[ 0 ].name = 'Back';
		}
		if ( this.referrerUrl ) {
			// Check if referrer is for this domain, if it is, use it
			if ( document.referrer.includes( this.urlObj.domain ) ) {
				crumbs[ 0 ].path = document.referrer;
			}
		}
	},

	handleFirstOnly( crumbs ) {
		if ( this.showFirstOnly ) {
			crumbs.length = 1;
		}
	},

	handlePreviousOnly( crumbs ) {
		if ( this.showPreviousOnly ) {
			// Get the second to last item in array and remove everything else
			const lastItem = crumbs[ crumbs.length - 2 ];
			if ( lastItem ) {
				crumbs.length = 0;
				crumbs.push( lastItem );
			}
		}
	},

	handleLast( crumbs ) {
		// If last is false, remove last item
		if ( ! this.last ) {
			crumbs.pop();
		}
		if ( this.last ) {
			// Use the document title
			if ( this.useTitle ) {
				crumbs[ crumbs.length - 1 ].name = document.title;
			}
		}
	},

	handleTrailingSlash( crumbs ) {
		if ( this.trailingSlash ) {
			// Add trailing slash to each crumb
			crumbs.map( ( crumb ) => {
				if ( ! crumb.path.endsWith( '/' ) ) {
					crumb.path = `${ crumb.path }/`;
				}
			} );
			return;
		}
		// If path is not equal to '/', remove trailing slash
		crumbs.map( ( crumb ) => {
			if ( crumb.path !== '/' && crumb.path.endsWith( '/' ) ) {
				crumb.path = crumb.path.slice( 0, -1 );
			}
		} );
	},

	handleLetterCase( crumbs ) {
		if ( this.lettercase === 'lowercase' ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.toLowerCase();
			} );
			return;
		}
		if ( this.lettercase === 'uppercase' ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.toUpperCase();
			} );
			return;
		}
		if ( this.lettercase === 'capitalize' ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.charAt( 0 ).toUpperCase() + crumb.name.slice( 1 );
			} );
		}
	},

	handleDashes( crumbs ) {
		if ( this.stripDashes ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.replace( /-/g, ' ' );
			} );
		}
	},

	handleUnderscores( crumbs ) {
		if ( this.stripUnderscores ) {
			crumbs.map( ( crumb ) => {
				crumb.name = crumb.name.replace( /_/g, ' ' );
			} );
		}
	},

	handleStringReplace( crumbs ) {
		if ( this.stringReplace ) {
			crumbs.map( ( crumb ) => {
				this.stringReplacements.forEach( ( replace ) => {
					// If path is not empty and path matches, do the find replace
					if ( replace.path !== '' ) {
						if ( crumb.path === replace.path ) {
							// If find is empty, replace the crumb name with replace name
							if ( replace.find === '' ) {
								crumb.name = replace.replace;
							} else {
							// If find is not empty, do the find replace
								crumb.name = crumb.name.replace( replace.find, replace.replace );
							}
						}
					} else if ( replace.path === '' ) {
						crumb.name = crumb.name.replace( replace.find, replace.replace );
					}
				} );
			} );
		}
	},
    }))
})
</script>
